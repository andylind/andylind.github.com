<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: code sample | Andy Lind]]></title>
  <link href="http://andylind.github.com/blog/categories/code-sample/atom.xml" rel="self"/>
  <link href="http://andylind.github.com/"/>
  <updated>2013-02-18T21:27:03-06:00</updated>
  <id>http://andylind.github.com/</id>
  <author>
    <name><![CDATA[Andy Lind]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git Stash Workflow]]></title>
    <link href="http://andylind.github.com/blog/2013/02/18/git-stash-workflow/"/>
    <updated>2013-02-18T20:14:00-06:00</updated>
    <id>http://andylind.github.com/blog/2013/02/18/git-stash-workflow</id>
    <content type="html"><![CDATA[<p>I often find that while I am coding I need to have more than one stream of work going on. One scenario that often occurs for me is that I am working on a feature and then a bug reports comes in that needs to be fixed right away. If the change becomes large, I will create a local branch for the bug fix, but most of the time I just want to save my unfinished feature changes somewhere while I quickly fix the bug. Git stash allows me to save my current workspace without having to commit unfinished work.</p>

<p>Here is how I use git stash most of the time:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;save changes in the workspace to the stash&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;git stash save <span class="s1">&#39;some name for what is saved&#39;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;do some work&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;then decide to go back to what is in the stash&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;apply the top stashâ€™s changes to the workspace&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;git stash pop
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Commands I use when I need to know more about what is in the stash:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;check to see what stashes exist&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;git stash list&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;see what files are changed in the top stash&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;git stash show&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;clear all items from the stash&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;git stash clear
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Changing a Git Commit Message]]></title>
    <link href="http://andylind.github.com/blog/2013/02/09/changing-a-git-commit-message/"/>
    <updated>2013-02-09T20:10:00-06:00</updated>
    <id>http://andylind.github.com/blog/2013/02/09/changing-a-git-commit-message</id>
    <content type="html"><![CDATA[<p>If you accidentally write the wrong thing in a Git commit message or think of something you forgot to comment on, it is possible to re-write your git commit message. Just make sure you have not already pushed the commit to others, or it may cause problems.</p>

<p>This command will let you change the commit message of your last Git commit:</p>

<pre>
git commit --amend -m "New commit message"
</pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple vi Tutorial]]></title>
    <link href="http://andylind.github.com/blog/2012/10/12/simple-vi-tutorial/"/>
    <updated>2012-10-12T14:27:00-05:00</updated>
    <id>http://andylind.github.com/blog/2012/10/12/simple-vi-tutorial</id>
    <content type="html"><![CDATA[<p>I spend most of my time programming in an IDE or in a text editor like notepad++ or gedit. When I ssh into a machine though, it is usually most convenient to use a command window for text editing. Understanding the most basic vi commands can be really helpful when you need to edit text from the terminal.</p>

<p>The first step for me to learn vi was to master just a few basic commands so that I would have enough knowledge to edit files. Below is the most minimal set of commands that you need to know to operate vi.</p>

<p>The key concept you have to learn is that vi has two modes. Insert mode and command mode. When vi is opened, it will start in command mode by default. This mode allows you to do things like run complex editing commands, save the file, and exit. Pressing "i" will take you to inset mode. Insert mode allows you to edit text that is in the file. Pressing esc will return to command mode.</p>

<p>It can be confusing at first to understand which mode you are in. If you want to be safe, you can always press "esc" and guarantee that you are in command mode.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;open vi&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;vi filename.txt&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;switch to insert mode&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;i&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;switch to <span class="nb">command </span>mode&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;esc&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;save a file&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;:w&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;exit vi&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;:q
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Most Used Linux Commands]]></title>
    <link href="http://andylind.github.com/blog/2012/09/07/my-most-used-linux-commands/"/>
    <updated>2012-09-07T13:28:00-05:00</updated>
    <id>http://andylind.github.com/blog/2012/09/07/my-most-used-linux-commands</id>
    <content type="html"><![CDATA[<p>The commands below make up about 90% of what I do on a Linux system. Most of what I do from the command line involves ssh'ing into a server, searching through log files, checking on processes, and editing configuration files. Since I am not doing most of my development work directly on a Linux box, I often find myself forgetting how to do certain tasks, or not knowing how to do something on a specific server. I put together the small guide below with commands that are available on almost any Linux system. By learning these few commands, I have been able to navigate around and get what I need done in almost any Linux environment.</p>

<pre>
#Login to a remote server
ssh [-p port] [username@hostname]
</pre>




<pre>
#List files in a directory with file information
ls -l
</pre>




<pre>
#See every process running on a system
ps aux
</pre>




<pre>
#Print the last 100 lines of a file
tail -100 [filename]
</pre>




<pre>
#Watch a log file as it grows
tail -f [filename]
</pre>




<pre>
#Look for a pattern in a file
grep [pattern] [file]
</pre>




<pre>
#Run an HTTP GET request to a url
curl [url]
</pre>




<pre>
#Change file permissions to read/write for all
chmod a+rw [filename]
</pre>


<p>Here is an example of a common way that I might chain commands together:</p>

<pre>
#Look in the last 1000 lines of a file for lines starting with ERROR
#and print out the matching lines and the 5 lines above and below
tail -1000 logs/logfile.txt | grep ^ERROR -A 5 -B 5
</pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Git with SVN]]></title>
    <link href="http://andylind.github.com/blog/2012/05/11/Using-Git-With-SVN/"/>
    <updated>2012-05-11T11:38:00-05:00</updated>
    <id>http://andylind.github.com/blog/2012/05/11/Using-Git-With-SVN</id>
    <content type="html"><![CDATA[<p>Here is my workflow for using Git with SVN:</p>

<p><div><script src='https://gist.github.com/2655799.js?file='></script>
<noscript><pre><code>//create local repo
git svn init -s http://url-of-repo
git svn fetch
git svn rebase

//work on a local branch or branches
git checkout -b myfeature

//make some changes and commit
git commit -a -m &quot;made some changes&quot;

//switch to master and rebase changes 
git checkout master
git rebase myfeature
git svn rebase

//see differences between local and svn trunk
git diff remotes/trunk

//commit changes to svn
git svn dcommit</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
</feed>
