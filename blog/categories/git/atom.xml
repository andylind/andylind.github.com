<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: git | Andy Lind]]></title>
  <link href="http://andylind.github.com/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://andylind.github.com/"/>
  <updated>2014-04-12T12:52:37-05:00</updated>
  <id>http://andylind.github.com/</id>
  <author>
    <name><![CDATA[Andy Lind]]></name>
    <email><![CDATA[contact@andylind.net]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[My Current Git Workflow]]></title>
    <link href="http://andylind.github.com/blog/2014/04/12/my-current-git-workflow/"/>
    <updated>2014-04-12T12:21:00-05:00</updated>
    <id>http://andylind.github.com/blog/2014/04/12/my-current-git-workflow</id>
    <content type="html"><![CDATA[<p>The flexibility of git is one of the main reasons that git is such a powerful tool. That flexibility also makes it difficult to pick a development workflow. With so many options for how to do any task, it is tough to know where to start.</p>

<p>Below are some recommendations from my experience using git on Windows over the last few years. In each case, there are many different options that you could choose. Not all of these ideas will work for everyone.</p>

<h2>Git Tools</h2>

<p>In the last year, I moved from using the command line only for git on Windows to integrating <a href="https://www.atlassian.com/software/sourcetree/overview">SourceTree</a> into my daily workflow. I still use the command line for complex commands such as interactive rebasing, but I am finding that I go to the command line much less often now.</p>

<p>SourceTree is an excellent user interface for git. Of all the git UIs I have used, it currently seems to be the most polished. The last few updates to SourceTree have moved it to support a number of the features that it was missing a few months ago. SourceTree is not perfect though. The application has frozen on me a few times, but a restart of the application always fixed the issue.</p>

<p><img src="/images/logoSourceTree.png"></p>

<p>In addition to SourceTree, I am using the VisualStudio git plugin and the IntelliJ git plugin. Both make it easy to see the git status context right inside of the IDE. I find that I mostly use the IDE plugins for viewing the status of file and checking history. I usually run most of the other git commands from SourceTree.</p>

<h2>Basic Principals</h2>

<p>These are basic principals that I follow whenever I am using git.<br>
&nbsp;&nbsp;&nbsp; - Do all work on local branches<br>
&nbsp;&nbsp;&nbsp; - Always keep the master branch clean to use for pulling from remotes<br>
&nbsp;&nbsp;&nbsp; - Use <a href="http://stackoverflow.com/questions/2290016/git-commit-messages-50-72-formatting">50/72 formatting</a> for commit messages<br>
&nbsp;&nbsp;&nbsp; - Commit changes often<br>
&nbsp;&nbsp;&nbsp; - Rebase changes that are not shared remotely<br>
&nbsp;&nbsp;&nbsp; - Merge changes that have been shared remotely<br></p>

<h2>Working on New Features</h2>

<p>This is the default workflow that I use when working on new features that will take me more than a few hours to complete. I do not use this workflow for every change that I make. If a change is really simple, I might just make it on master.</p>

<h4>Making changes:</h4>

<p>&nbsp;&nbsp;&nbsp; - Make sure the working directory is clean<br>
&nbsp;&nbsp;&nbsp; - Pull the latest version of the code from master<br>
&nbsp;&nbsp;&nbsp; - Create and switch to a new branch named "work" (or "name-of-feature")<br>
&nbsp;&nbsp;&nbsp; - Make changes on the work branch<br>
&nbsp;&nbsp;&nbsp; - Commit changes often</p>

<h4>Sharing changes:</h4>

<p>&nbsp;&nbsp;&nbsp; - <a href="/blog/2013/04/18/combining-multiple-git-commits/">Interactive rebase</a> complex changes into a single commit if needed<br>
&nbsp;&nbsp;&nbsp; - Switch to master and pull changes<br>
&nbsp;&nbsp;&nbsp; - Switch to the work branch<br>
&nbsp;&nbsp;&nbsp; - Rebase the work branch to master and resolve any conflicts<br>
&nbsp;&nbsp;&nbsp; - Run tests to make sure the changes are ready to push<br>
&nbsp;&nbsp;&nbsp; - Switch to master and rebase to the work branch (Should be no changes)<br>
&nbsp;&nbsp;&nbsp; - Push commits<br></p>

<p><strong>Summary:</strong> Use a local branch to make changes, then rebase back to master.</p>

<p><strong>Note:</strong> I use a generic local branch named "work" when I do not have a name for the feature I am working on.</p>

<p>This workflow is how I have been using git for the last few years. The overall goal is to make sure all work is independently captured in source control and to make it easy to switch between working on different features and bugs as needed.</p>

<p>These recommendations are for how to work with git on a medium sized team of developers. For code bases where I am the only developer, I use a more relaxed workflow and do not worry as much about local branches. For code bases with dozens or more developers, I would use a more strict process.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intro to git-svn]]></title>
    <link href="http://andylind.github.com/blog/2013/09/11/intro-to-git-svn/"/>
    <updated>2013-09-11T22:40:00-05:00</updated>
    <id>http://andylind.github.com/blog/2013/09/11/intro-to-git-svn</id>
    <content type="html"><![CDATA[<p>This is a presentation that I recently gave on the distributed version control system <a href="http://www.git-scm.com">Git</a> and how it can be used with SVN. In the presentation, I introduce the concepts behind Git, some of the main Git commands, and how to use git-svn.</p>

<p><a href="https://www.kernel.org/pub/software/scm/git/docs/git-svn.html">Git-svn</a> is a feature that ships with Git that allows Git to connect to a subversion repository and share changes. Using git-svn is one way to learn how to use Git while still maintaining a Subversion repository.</p>

<p>You can see more of my git-svn workflow in <a href="http://andylind.github.io/blog/2012/05/11/Using-Git-With-SVN/">this post</a></p>

<script async class="speakerdeck-embed" data-id="0576e7c0f92c0130bb2576ac50ee3936" data-ratio="1.33333333333333" src="http://andylind.github.com//speakerdeck.com/assets/embed.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Combining Multiple Git Commits]]></title>
    <link href="http://andylind.github.com/blog/2013/04/18/combining-multiple-git-commits/"/>
    <updated>2013-04-18T18:35:00-05:00</updated>
    <id>http://andylind.github.com/blog/2013/04/18/combining-multiple-git-commits</id>
    <content type="html"><![CDATA[<p>Using Git, it is possible to combine multiple commits into a single commit with interactive rebasing.</p>

<p>The first step is to select the commits that you want to combine. Here is an example of selecting the last 3 commits:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git rebase -i HEAD~3
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This will open your text editor and display:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>pick e520ab4 example commit message
</span><span class='line'>pick 937b3bb another example commit message
</span><span class='line'>pick 2ab71fc and another example commit message&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Rebase e520ab4 ..2ab71fc onto 19ac48b&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;#&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Commands:c&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;p, <span class="nv">pick</span> <span class="o">=</span> use commit&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;e, <span class="nv">edit</span> <span class="o">=</span> use commit, but stop <span class="k">for </span>amending&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;s, <span class="nv">squash</span> <span class="o">=</span> use commit, but meld into previous commit&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Changing all of the items below the top one to "squash" will combine the commits:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>pick e520ab4 example commit message
</span><span class='line'>squash 937b3bb another example commit message
</span><span class='line'>squash 2ab71fc and another example commit message&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Rebase e520ab4 ..2ab71fc onto 19ac48b&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;#&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Commands:&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;p, <span class="nv">pick</span> <span class="o">=</span> use commit&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;e, <span class="nv">edit</span> <span class="o">=</span> use commit, but stop <span class="k">for </span>amending&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;s, <span class="nv">squash</span> <span class="o">=</span> use commit, but meld into previous commit&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>After you save and close that text editor, another text editor will open. This will allow you to re-write the commit message:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;This is a combination of 3 commits.&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;The first commit<span class="err">&#39;</span>s message is:&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;example commit message&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;This is the 2nd commit message:&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;another example commit message&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;This is the 3rd commit message:&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;and another example commit message
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Write your new commit message, save, and close. Your three commits are now combined into one single commit.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Stash Workflow]]></title>
    <link href="http://andylind.github.com/blog/2013/02/18/git-stash-workflow/"/>
    <updated>2013-02-18T20:14:00-06:00</updated>
    <id>http://andylind.github.com/blog/2013/02/18/git-stash-workflow</id>
    <content type="html"><![CDATA[<p>I often find that while I am coding I need to have more than one stream of work going on. One scenario that often occurs is that I am working on a feature and then a bug report comes in that needs to be fixed right away. If the change becomes large, I will create a local branch for the bug fix, but most of the time I just want to save my unfinished feature changes somewhere while I quickly fix the bug.</p>

<p><a href="http://git-scm.com/book/en/Git-Tools-Stashing">Git stash</a> allows me to save my current workspace without having to commit unfinished work. The stash command takes all uncommitted changes in the workspace and saves them on a stack so that you can change branches or pull in commits. This is a great way to save a set of changes that you are not quite finished with so that you can switch to working on something else. The changes can be saved with a description so that you can see what you saved later.</p>

<p>Simple git stash workflow that I use most of the time:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;save changes in the workspace to the stash&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;git stash save <span class="s1">&#39;some name for what is saved&#39;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;do some work&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;then decide to go back to what is in the stash&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;apply the top stash’s changes to the workspace&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;git stash pop
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>When I need to know more about what is in the stash:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;check to see what stashes exist&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;git stash list&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;see what files are changed in the top stash&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;git stash show&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;clear all items from the stash&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;git stash clear
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intro to Git]]></title>
    <link href="http://andylind.github.com/blog/2012/11/07/intro-to-git/"/>
    <updated>2012-11-07T16:00:00-06:00</updated>
    <id>http://andylind.github.com/blog/2012/11/07/intro-to-git</id>
    <content type="html"><![CDATA[<p>This is a presentation that I recently gave on the distributed version control system <a href="http://www.git-scm.com">Git</a>. In the presentation, I introduce the concepts behind Git and some of the main Git commands. Then I walkthrough how Git can change your workflow as a developer.</p>

<script async class="speakerdeck-embed" data-id="5099d54eecc0de0002015138" data-ratio="1.3333333333333333" src="http://andylind.github.com//speakerdeck.com/assets/embed.js"></script>

]]></content>
  </entry>
  
</feed>
